__resources__:
  gpu:
    - "gpu"
    - "nvidia_gpu"

__options__:
  jc:
    - "jc"
    - "jclass"
    - "job_class"

__default__:
  # we can comment it, use default, or specific it, use we defined.
  # eg: HPC2021 of HKU

  partition: "intel,amd" # use default, can uncomment and change
  # partition | default;max job duration | # of nodes | cores/node | RAM/node(GB) | RAM/core(GB) | Features
  #########################################################################################################
  # intel     | 1 Day;4 Days             | 84         | 32         | 192          | 6            | GOLD6625R
  # amd       | 1 Day;4 Days             | 28         | 64         | 256          | 4            | EPYC7542
  # amd       | 1 Day;4 Days             | 28         | 128        | 512          | 4            | EPYC7742
  # gpu       | 1 Day;1 Week             | 4          | 32         | 384          | 12           | 4x V100
  # gpu       | 1 Day;1 Week             | 3          | 32         | 384          | 12           | 8x V100
  # hugumem   | 1 Day;1 Week             | 2          | 128        | 2048         | 16           | EPYC7742 + 2TB RAM

  #qos: "normal" # use default, can uncomment and change
  # qos     | partition     | max job duration | max resources per job
  ####################################################################
  # debug   | intel,amd,gpu | 30 minutes       | 2 nodes, 2 GPUs
  # normal  | intel,amd     | 4 Days           | 1024 cores
  # long    | intel,amd     | 2 Weeks          | One node
  # special | intel,amd     | 1 Day            | 2048 cores
  # gpu     | gpu           | 1 Week           | One node, 4 GPUs
  # hugemem | hugemem       | 1 Week           | One node, 2TB RAM

  mem: "512M"
  nodes: 1 # one rule run on one node, unless rule support MPI/openmp
  #threads: 1
  #time: 24:00:00 # one day, PriorityTimelimit


simulate_short_reads:
  mem: "2G"
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

prepare_short_reads:
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

prepare_long_reads:
  mem: "1G"
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

raw_fastqc:
  mem: "2G"
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

raw_fastqc_multiqc:
  mem: "2G"
  output: "logs/00.{rule}/{rule}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{jobid}.e"

raw_report:
  mem: "1G"
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

raw_report_refine:
  mem: "1G"
  output: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

raw_report_merge:
  mem: "2G"
  output: "logs/00.{rule}/{rule}.{jobid}.o"
  error: "logs/00.{rule}/{rule}.{jobid}.e"

trimming_sickle:
  mem: "2G"
  output: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

trimming_fastp:
  mem: "8G"
  output: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

trimming_fastp_multiqc:
  mem: "2G"
  output: "logs/01.{rule}/{rule}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{jobid}.e"

trimming_trimmomatic:
  mem: "8G"
  output: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

trimming_trimmomatic_multiqc:
  mem: "2G"
  output: "logs/01.{rule}/{rule}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{jobid}.e"

trimming_report:
  mem: "1G"
  output: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

trimming_report_refine:
  mem: "1G"
  output: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

trimming_report_merge:
  mem: "2G"
  output: "logs/01.{rule}/{rule}.{jobid}.o"
  error: "logs/01.{rule}/{rule}.{jobid}.e"

rmhost_bwa_index:
  mem: "2G"
  output: "logs/02.{rule}/{rule}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{jobid}.e"

rmhost_bwa:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_bowtie2_index:
  mem: "2G"
  output: "logs/02.{rule}/{rule}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{jobid}.e"

rmhost_bowtie2:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_minimap2_index:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{jobid}.e"

rmhost_minimap2:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_kraken2:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_kneaddata:
  mem: "8G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_alignment_report:
  mem: "1G"
  output: "logs/02.{rule}/{rule}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{jobid}.e"

rmhost_report:
  mem: "1G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_report_refine:
  mem: "1G"
  output: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

rmhost_report_merge:
  mem: "2G"
  output: "logs/02.{rule}/{rule}.{jobid}.o"
  error: "logs/02.{rule}/{rule}.{jobid}.e"

profiling_grid:
  mem: "2G"
  output: "logs/04.{rule}/{rule}.{wildcards.sample}.{jobid}.o"
  error: "logs/04.{rule}/{rule}.{wildcards.sample}.{jobid}.e"

profiling_grid_merge:
  mem: "2G"
  output: "logs/04.{rule}/{rule}.{jobid}.o"
  error: "logs/04.{rule}/{rule}.{jobid}.e"
